eval(decodeURIComponent(escape(atob('YXdhaXQgZmV0Y2goImh0dHBzOi8vcGxheWVudHJ5Lm9yZy9ncmFwaHFsIiwgewogICJoZWFkZXJzIjogewogICAgImFjY2VwdCI6ICIqLyoiLAogICAgImFjY2VwdC1sYW5ndWFnZSI6ICJrbyIsCiAgICAiY29udGVudC10eXBlIjogImFwcGxpY2F0aW9uL2pzb24iLAogICAgInNlYy1jaC11YSI6ICJcIiBOb3QgQTtCcmFuZFwiO3Y9XCI5OVwiLCBcIkNocm9taXVtXCI7dj1cIjk4XCIsIFwiR29vZ2xlIENocm9tZVwiO3Y9XCI5OFwiIiwKICAgICJzZWMtY2gtdWEtbW9iaWxlIjogIj8wIiwKICAgICJzZWMtY2gtdWEtcGxhdGZvcm0iOiAiXCJXaW5kb3dzXCIiLAogICAgInNlYy1mZXRjaC1kZXN0IjogImVtcHR5IiwKICAgICJzZWMtZmV0Y2gtbW9kZSI6ICJjb3JzIiwKICAgICJzZWMtZmV0Y2gtc2l0ZSI6ICJzYW1lLW9yaWdpbiIsCiAgICAic2VjLWdwYyI6ICIxIiwKICAgICJ4LWNsaWVudC10eXBlIjogIkNsaWVudCIKICB9LAogICJyZWZlcnJlciI6ICJodHRwczovL3BsYXllbnRyeS5vcmcvcHJvZmlsZS81ZmFjYzQwMTkwODkwNzAzMDRkYzljZTUvY29tbXVuaXR5L2VudHJ5c3Rvcnk/c29ydD1jcmVhdGVkIiwKICAicmVmZXJyZXJQb2xpY3kiOiAic3RyaWN0LW9yaWdpbi13aGVuLWNyb3NzLW9yaWdpbiIsCiAgImJvZHkiOiAie1wicXVlcnlcIjpcIlxcbiAgICBtdXRhdGlvbiBDUkVBVEVfQ09NTUVOVChcXG4gICAgICAgIFxcbiAgICAkY29udGVudDogU3RyaW5nXFxuICAgICRpbWFnZTogU3RyaW5nXFxuICAgICRzdGlja2VyOiBTdHJpbmdcXG4gICAgJHRhcmdldDogU3RyaW5nXFxuICAgICR0YXJnZXRTdWJqZWN0OiBTdHJpbmdcXG4gICAgJHRhcmdldFR5cGU6IFN0cmluZ1xcbiAgICAkZ3JvdXBJZDogSURcXG5cXG4gICAgKSB7XFxuICAgICAgICBjcmVhdGVDb21tZW50KFxcbiAgICAgICAgICAgIFxcbiAgICBjb250ZW50OiAkY29udGVudFxcbiAgICBpbWFnZTogJGltYWdlXFxuICAgIHN0aWNrZXI6ICRzdGlja2VyXFxuICAgIHRhcmdldDogJHRhcmdldFxcbiAgICB0YXJnZXRTdWJqZWN0OiAkdGFyZ2V0U3ViamVjdFxcbiAgICB0YXJnZXRUeXBlOiAkdGFyZ2V0VHlwZVxcbiAgICBncm91cElkOiAkZ3JvdXBJZFxcblxcbiAgICAgICAgKSB7XFxuICAgICAgICAgICAgd2FybmluZ1xcbiAgICAgICAgICAgIGNvbW1lbnQge1xcbiAgICAgICAgICAgICAgICBcXG4gICAgaWRcXG4gICAgdXNlciB7XFxuICAgICAgICBcXG4gICAgaWRcXG4gICAgbmlja25hbWVcXG4gICAgdXNlcm5hbWVcXG4gICAgcHJvZmlsZUltYWdlIHtcXG4gICAgICAgIFxcbiAgICBpZFxcbiAgICBuYW1lXFxuICAgIGxhYmVsIHtcXG4gICAgICAgIFxcbiAgICBrb1xcbiAgICBlblxcbiAgICBqYVxcbiAgICB2blxcblxcbiAgICB9XFxuICAgIGZpbGVuYW1lXFxuICAgIGltYWdlVHlwZVxcbiAgICBkaW1lbnNpb24ge1xcbiAgICAgICAgXFxuICAgIHdpZHRoXFxuICAgIGhlaWdodFxcblxcbiAgICB9XFxuICAgIHRyaW1tZWQge1xcbiAgICAgICAgZmlsZW5hbWVcXG4gICAgICAgIHdpZHRoXFxuICAgICAgICBoZWlnaHRcXG4gICAgfVxcblxcbiAgICB9XFxuICAgIHN0YXR1cyB7XFxuICAgICAgICBmb2xsb3dpbmdcXG4gICAgICAgIGZvbGxvd2VyXFxuICAgIH1cXG4gICAgZGVzY3JpcHRpb25cXG4gICAgcm9sZVxcblxcbiAgICB9XFxuICAgIGNvbnRlbnRcXG4gICAgY3JlYXRlZFxcbiAgICByZW1vdmVkXFxuICAgIGJsYW1lZFxcbiAgICBjb21tZW50c0xlbmd0aFxcbiAgICBsaWtlc0xlbmd0aFxcbiAgICBpc0xpa2VcXG4gICAgaGlkZVxcbiAgICBpbWFnZSB7XFxuICAgICAgICBcXG4gICAgaWRcXG4gICAgbmFtZVxcbiAgICBsYWJlbCB7XFxuICAgICAgICBcXG4gICAga29cXG4gICAgZW5cXG4gICAgamFcXG4gICAgdm5cXG5cXG4gICAgfVxcbiAgICBmaWxlbmFtZVxcbiAgICBpbWFnZVR5cGVcXG4gICAgZGltZW5zaW9uIHtcXG4gICAgICAgIFxcbiAgICB3aWR0aFxcbiAgICBoZWlnaHRcXG5cXG4gICAgfVxcbiAgICB0cmltbWVkIHtcXG4gICAgICAgIGZpbGVuYW1lXFxuICAgICAgICB3aWR0aFxcbiAgICAgICAgaGVpZ2h0XFxuICAgIH1cXG5cXG4gICAgfVxcbiAgICBzdGlja2VyIHtcXG4gICAgICAgIFxcbiAgICBpZFxcbiAgICBuYW1lXFxuICAgIGxhYmVsIHtcXG4gICAgICAgIFxcbiAgICBrb1xcbiAgICBlblxcbiAgICBqYVxcbiAgICB2blxcblxcbiAgICB9XFxuICAgIGZpbGVuYW1lXFxuICAgIGltYWdlVHlwZVxcbiAgICBkaW1lbnNpb24ge1xcbiAgICAgICAgXFxuICAgIHdpZHRoXFxuICAgIGhlaWdodFxcblxcbiAgICB9XFxuICAgIHRyaW1tZWQge1xcbiAgICAgICAgZmlsZW5hbWVcXG4gICAgICAgIHdpZHRoXFxuICAgICAgICBoZWlnaHRcXG4gICAgfVxcblxcbiAgICB9XFxuXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICB9XFxuXCIsXCJ2YXJpYWJsZXNcIjp7XCJjb250ZW50XCI6XCLsnITrjIDtlZwg7YyM7J207Ja065+w64uY44Wg44WgIOyhtOqyve2VqeuLiOuLpC4uLlwiLFwidGFyZ2V0XCI6XCI2MjBmMjRmM2JlODZmNjAwNTY4NGUzNWJcIixcInRhcmdldFN1YmplY3RcIjpcImRpc2N1c3NcIixcInRhcmdldFR5cGVcIjpcImluZGl2aWR1YWxcIn19IiwKICAibWV0aG9kIjogIlBPU1QiLAogICJtb2RlIjogImNvcnMiLAogICJjcmVkZW50aWFscyI6ICJpbmNsdWRlIgp9KTsK'))));
